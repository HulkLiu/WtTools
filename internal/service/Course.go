package service

import (
	"context"

	"github.com/HulkLiu/WtTools/internal/model"
	"github.com/olivere/elastic/v7"
	"log"
	"reflect"
	"regexp"
	"sync"
)

type CourseManage struct {
	ElasticIndex      string
	Client            *elastic.Client
	Err               error
	PageSize          int
	CourseDefaultJson string
	wg                sync.Mutex
}

func (v *CourseManage) CourseList(keyword string) (model.SearchResult, error) {
	var result model.SearchResult

	from := 0
	q := keyword

	result, err := v.getSearchResult(q, from)
	if err != nil {
		return result, err
	}
	//log.Printf("%v", result)
	return result, nil
	//return []define.AutoGenerated{{}}, nil

}

func (v *CourseManage) getSearchResult(q string, from int) (model.SearchResult, error) {
	var result model.SearchResult
	if q == "" {
		q = v.ElasticIndex
	}
	result.Query = q

	resp, err := v.Client.
		Search(v.ElasticIndex).
		Query(elastic.NewQueryStringQuery(
			rewriteQueryString(q))).
		Size(10000).
		Do(context.Background())

	if err != nil {
		return result, err
	}

	result.Hits = resp.TotalHits()
	result.Start = from
	result.Items = resp.Each(reflect.TypeOf(model.Item{}))
	if result.Start == 0 {
		result.PrevFrom = -1
	} else {
		result.PrevFrom = (result.Start - 1) / v.PageSize * v.PageSize
	}
	result.NextFrom = result.Start + len(result.Items)

	log.Printf("result.Start :%v,result.Hits:%v,result.PrevFrom:%v,result.NextFrom:%v,result.Query :%v", result.Start, result.Hits, result.PrevFrom, result.NextFrom, result.Query)

	return result, nil
}
func rewriteQueryString(q string) string {
	re := regexp.MustCompile(`([A-Z][a-z]*):`)
	return re.ReplaceAllString(q, "Payload.$1:")
}
